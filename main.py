from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from PIL import Image, ImageEnhance
import pytesseract
import io
import os
import platform
import json
import re
from dotenv import load_dotenv
from openai import OpenAI

# Carrega .env com chave da OpenAI
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Ajusta o caminho do tesseract se for Windows
if platform.system() == "Windows":
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

app = FastAPI()

# Permite frontend separado (ajuste allow_origins se necess√°rio)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/upload")
async def upload_image(file: UploadFile = File(...)):
    try:
        # Abre a imagem enviada
        image_data = await file.read()
        image = Image.open(io.BytesIO(image_data))

        # Pr√©-processamento: escala de cinza e aumento de contraste
        image = image.convert("L")
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.0)

        # OCR
        try:
            ocr_text = pytesseract.image_to_string(image, lang='por', config="--psm 6")
        except:
            ocr_text = pytesseract.image_to_string(image, config="--psm 6")

        print("üßæ OCR extra√≠do:\n", ocr_text)

        # Prompt para IA
        prompt = f"""
Voc√™ receber√° o texto extra√≠do de um r√≥tulo de um produto aliment√≠cio (como leite, iogurte, bebida vegetal, etc.).  
Sua tarefa √© organizar **somente as informa√ß√µes que aparecem explicitamente** nesse texto, no formato JSON abaixo.

‚ö†Ô∏è **Importante:**
- N√£o invente informa√ß√µes que n√£o est√£o no texto.
- N√£o complete campos com base em suposi√ß√µes.
- Se algo n√£o estiver claro ou estiver faltando, **deixe o campo em branco ou omita**.

üß† **Sobre os ingredientes:**
- Liste **cada ingrediente separadamente**.
- O campo `"name"` deve conter o nome do ingrediente com a **primeira letra mai√∫scula**, mesmo que no texto OCR esteja em min√∫sculo.
- A `"description"` deve explicar, se poss√≠vel, a fun√ß√£o ou papel do ingrediente no produto.
- Se a descri√ß√£o n√£o puder ser determinada com seguran√ßa, pode deixar em branco.
- O campo `"safe"` deve ser definido como `true`, a menos que o ingrediente seja claramente identificado como perigoso ou alerg√™nico.

üß™ **Sobre os dados nutricionais:**
- Extraia pares como: `"Valor energ√©tico": "130 kcal"`, `"Categoria": "por por√ß√£o"`.
- S√≥ inclua dados que realmente estiverem presentes no OCR.

üìù **Formato esperado:**

{{
  "productName": "",
  "brand": "",
  "ingredients": [
    {{
      "name": "",             // Sempre come√ßar com letra mai√∫scula
      "description": "",
      "safe": true
    }}
  ],
  "nutrition": [
    {{
      "label": "",
      "value": "",
      "category": ""
    }}
  ],
  "additionalInfo": {{
    "claims": [],                  // Ex: "Fonte de c√°lcio", "Sem lactose"
    "warnings": [],                // Ex: "Cont√©m derivados de leite"
    "servingSize": "",            // Ex: "200 ml"
    "storageInstructions": ""     // Ex: "Manter refrigerado ap√≥s aberto"
  }}
}}

üìå **Exemplo v√°lido de ingredients:**

"ingredients": [
  {{
    "name": "Leite integral",
    "description": "Ingrediente principal do produto, fonte de prote√≠na e c√°lcio.",
    "safe": true
  }},
  {{
    "name": "Trifosfato pentass√≥dico",
    "description": "Estabilizante utilizado para manter a textura do leite.",
    "safe": true
  }}
]

### Texto OCR:

\"\"\"{ocr_text}\"\"\"
"""



        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": "Voc√™ transforma r√≥tulos de leite em JSON estruturado no formato solicitado."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.2,
        )

        content = response.choices[0].message.content
        print("üì¶ JSON gerado:\n", content)

        # Limpa markdown e converte para JSON real
        match = re.search(r"```json\s*(.*)\s*```", content, re.DOTALL)
        if match:
            json_str = match.group(1)
        else:
            match = re.search(r"```(.*)```", content, re.DOTALL)
            if match:
                json_str = match.group(1)
            else:
                json_str = content

        try:
            json_result = json.loads(json_str)
        except Exception:
            json_result = {"erro": "N√£o foi poss√≠vel converter para JSON", "original": json_str}

        # Salva JSON limpo
        with open("ultimo_resultado.json", "w", encoding="utf-8") as f:
            json.dump(json_result, f, ensure_ascii=False, indent=2)

        return {"json_result": json_result}

    except Exception as e:
        return {"error": str(e)}

@app.get("/resultado")
def get_resultado():
    try:
        if os.path.exists("ultimo_resultado.json"):
            with open("ultimo_resultado.json", "r", encoding="utf-8") as f:
                data = json.load(f)
            return {"json_result": data}
        else:
            return {"mensagem": "Nenhum resultado gerado ainda."}
    except Exception as e:
        return {"erro": str(e)}
