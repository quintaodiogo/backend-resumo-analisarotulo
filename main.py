from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from PIL import Image, ImageEnhance
import pytesseract
import io
import os
import platform
import json
import re
from dotenv import load_dotenv
from openai import OpenAI

# Carrega .env com chave da OpenAI
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Ajusta o caminho do tesseract se for Windows
if platform.system() == "Windows":
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

app = FastAPI()

# Permite frontend separado (ajuste allow_origins se necess√°rio)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/upload")
async def upload_image(file: UploadFile = File(...)):
    try:
        # Abre a imagem enviada
        image_data = await file.read()
        image = Image.open(io.BytesIO(image_data))

        # Pr√©-processamento: escala de cinza e aumento de contraste
        image = image.convert("L")
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.0)

        # OCR
        try:
            ocr_text = pytesseract.image_to_string(image, lang='por', config="--psm 6")
        except:
            ocr_text = pytesseract.image_to_string(image, config="--psm 6")

        print("üßæ OCR extra√≠do:\n", ocr_text)

        # Prompt para IA
        prompt = f"""
Voc√™ receber√° o texto extra√≠do por OCR de um r√≥tulo de produto aliment√≠cio.

Sua tarefa √© montar um JSON com os dados **somente se estiverem claramente presentes** no texto.  
Caso n√£o consiga identificar uma informa√ß√£o, **deixe o campo em branco ou omita**.  
N√£o invente, n√£o deduza, e n√£o use conhecimento externo.

‚ö†Ô∏è **Sobre os ingredientes:**
- Liste apenas ingredientes vis√≠veis no texto.
- Cada ingrediente deve ser um item separado no array `"ingredients"`.
- O campo `"name"` deve come√ßar com letra mai√∫scula, mesmo que no OCR apare√ßa em min√∫sculo.
- O campo `"description"` deve explicar a fun√ß√£o, se puder ser inferida com clareza.
- O campo `"safe"` deve ser `true`, a menos que haja **indica√ß√£o clara** de risco.

‚ö†Ô∏è **Sobre os dados nutricionais:**
- Copie exatamente como estiver no texto.
- Exemplo: `"Valor energ√©tico": "130 kcal"`, `"Categoria": "por por√ß√£o"`.

‚ö†Ô∏è **Se√ß√µes adicionais:**
- `"claims"` ‚Üí Frases de marketing como "Fonte de c√°lcio", "Zero lactose".
- `"warnings"` ‚Üí Avisos como "Cont√©m leite", "Pode conter soja".
- `"servingSize"` ‚Üí Por√ß√µes.
- `"storageInstructions"` ‚Üí Instru√ß√µes de conserva√ß√£o.

üìå **Exemplo de estrutura esperada:**

{{
  "productName": "",
  "brand": "",
  "ingredients": [
    {{
      "name": "Leite Integral",
      "description": "Ingrediente principal, rico em c√°lcio e prote√≠na.",
      "safe": true
    }}
  ],
  "nutrition": [
    {{
      "label": "Valor energ√©tico",
      "value": "130 kcal",
      "category": "por por√ß√£o"
    }}
  ],
  "additionalInfo": {{
    "claims": ["Fonte de c√°lcio"],
    "warnings": ["Cont√©m lactose"],
    "servingSize": "200 ml",
    "storageInstructions": "Manter refrigerado ap√≥s aberto"
  }}
}}

üìÑ **Texto OCR a ser interpretado:**

\"\"\"{ocr_text}\"\"\"
"""




        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": "Voc√™ transforma r√≥tulos de leite em JSON estruturado no formato solicitado."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.2,
        )

        content = response.choices[0].message.content
        print("üì¶ JSON gerado:\n", content)

        # Limpa markdown e converte para JSON real
        match = re.search(r"```json\s*(.*)\s*```", content, re.DOTALL)
        if match:
            json_str = match.group(1)
        else:
            match = re.search(r"```(.*)```", content, re.DOTALL)
            if match:
                json_str = match.group(1)
            else:
                json_str = content

        try:
            json_result = json.loads(json_str)
        except Exception:
            json_result = {"erro": "N√£o foi poss√≠vel converter para JSON", "original": json_str}

        # Salva JSON limpo
        with open("ultimo_resultado.json", "w", encoding="utf-8") as f:
            json.dump(json_result, f, ensure_ascii=False, indent=2)

        return {"json_result": json_result}

    except Exception as e:
        return {"error": str(e)}

@app.get("/resultado")
def get_resultado():
    try:
        if os.path.exists("ultimo_resultado.json"):
            with open("ultimo_resultado.json", "r", encoding="utf-8") as f:
                data = json.load(f)
            return {"json_result": data}
        else:
            return {"mensagem": "Nenhum resultado gerado ainda."}
    except Exception as e:
        return {"erro": str(e)}
